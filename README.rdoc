= Demo application for Rails internalization API

Simple & minimal Rails application to test the Rails internationalization and localization API

It shows how you can override Rails default locale/language ('en') in views, in ActiveRecord validation messages, etc. It shows you how to test internalization features.

Tries to set some reasonable pattern to load translation files and set locale 
either from request domain (.com, .de, etc) or request params. Do not ever set locale to cookie or session, as it breaks basic assumptions about web. Read this discussion for context: http://groups.google.com/group/rails-i18n/browse_thread/thread/de73dbd1309ae640/

*Includes translation file* for Czech language so you can easily roll your own Spanish, German, Polish, 
etc version just by duplicating the file, renaming it and changing the translation strings. 
After server restart you should see your language in language bar at the top of the page.

== Installation & Requirements

* Download & unpack archive or <tt>git clone</tt> from Github [http://github.com/karmi/rails_i18n_demo_app]

* The application <b>requires Rails version 2.2 or later</b>. Either upgrade your Rails gem by running

  $ sudo gem update rails
  
* or just download and freeze Rails into <tt>vendor/rails</tt>

  $ rake rails:freeze:edge RELEASE=2.2.2
  
* Run migrations (to be able to test ActiveRecord message localizations) by <tt>rake db:migrate</tt>
  
* Run <tt>script/server</tt> and point your browser at http://localhost:3000

== About setting the locale from the request domain

Usually the most sane approach to setting locale/language version of the application is 
from the domain: <tt>application.com</tt> loads English, <tt>application.es</tt> Spanish. This works best
for content heavy websites and search engines love it.

The <tt>ApplicationController#extract_locale_from_uri</tt> sets locale from the domain.
To test this, you have to edit <tt>/etc/hosts</tt> by inserting lines like:

  127.0.0.1 application.com
  127.0.0.1 application.cz

Then just load your application as usual at <tt>http://application.cz:3000</tt> or <tt>http://application.com:3000</tt> 
and you should see the locale being switched


== About Rails i18n

See (excellent) guide at http://guides.rails.info/i18n.html
See http://www.rails-i18n.org for more info and get in touch at http://groups.google.com/group/rails-i18n